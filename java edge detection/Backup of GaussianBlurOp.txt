import java.awt.image.*;
import java.awt.*;

/* Applies Gaussian Blur to object
 */
 
public class GaussianBlurOp{

	/* global variables */
	private Image originalImage;
	private Image finalImage;
	private int pixels[];
	private int height;
	private int width;
	private int intensity;
	private boolean arraygiven;
	
	/* constructor, given source image 
	 */
	public GaussianBlurOp(Image p_originalImage, int p_intensity){
		originalImage = p_originalImage;
		intensity = p_intensity;
		height = originalImage.getHeight(null);
		width = originalImage.getWidth(null);	
		pixels = new int[height * width];
		finalImage = null;
		arraygiven = false;
	}

	public GaussianBlurOp(int[] p_pixels, int p_height, int p_width, int p_intensity){
		intensity = p_intensity;
		height = p_height;
		width = p_width;	
		pixels = new int[height * width];
		pixels = p_pixels;
		finalImage = null;
		arraygiven = true;
	}

	/* called by outside class to get the processed image
	 */
	public Image getImage(){
		System.out.println("IN DA GETIMAGE FUNCTION");
		if(finalImage == null){
			getArray();
			int processedpixels[] = new int[pixels.length];
			gbop(processedpixels, intensity);
			convertToImage(processedpixels);
		}
		return finalImage;
	}

	/* uses pixelGrabber to convert each bit in an image into a pixel and
	   stores it in an array
	 */
	private void getArray(){
		if(!arraygiven){
			PixelGrabber pg = 
			new PixelGrabber(originalImage,0,0,width,height,pixels,0,width);
			try{
				pg.grabPixels();
			} catch(Exception e){
				System.out.println("PixelGrabber failed");
			}
		}
	}
	
	/* implements gaussian blur algorithm
	 */
	private void gbop(int[] processedpixels, int intensity){
		int temppixels[] = new int[height*width];
		for(int i=0; i<width*height; i++){
			int p = pixels[i];
			
			//extracts the red, green, and blue bits from the pixel
			int r = 0xff & (p >> 16);
			int g = 0xff & (p >> 8);
			int b = 0xff & (p);
			//standard greyscale conversion
			int k = (int) (.56*g + .33*r + .11*b);
			temppixels[i] = k;
		}
		//Change to matrix form to facilitate processing
		int colormatrix[][] = new int[height][width];
		for(int r = 0; r < height; r++){
			for(int c = 0; c < width; c++){
				colormatrix[r][c] = temppixels[r*width + c];
			}
		}
		//do gaussian blur
		int finalmatrix[][] = new int[height][width];
		if(intensity == 3){
			for(int r = 1; r < height - 1; r++){
				for(int c = 1; c < width - 1; c++){
					double dividingconst = 1.0/4.92;
					finalmatrix[r][c] = (int)
						(.37*colormatrix[r-1][c-1]*dividingconst +
						.61*colormatrix[r-1][c]*dividingconst +	
						.37*colormatrix[r-1][c+1]*dividingconst +
						
						.61*colormatrix[r][c-1]*dividingconst + 
						1.0*colormatrix[r][c]*dividingconst + 
						.61*colormatrix[r][c+1]*dividingconst + 

						.37*colormatrix[r+1][c-1]*dividingconst +
						.61*colormatrix[r+1][c]*dividingconst +	
						.37*colormatrix[r+1][c+1]*dividingconst);						
					int k = Math.abs(finalmatrix[r][c]);
					//convert back to array (making sure its color)
					int p2 = pixels[r*width+c];
					int r2 = 0xff & (p2 >> 16);
					int g2 = 0xff & (p2 >> 8);
					int b2 = 0xff & (p2);
					int k2 = (int) (.56*g2 + .33*r2 + .11*b2);
					if(r2==0) r2 = 1;
					if(g2==0) g2 = 1;
					if(b2==0) b2 = 1;
					if(k2==0) k2 = 1;
					int	rnew = ((int) (r2*k/k2)) & 0xff;
					int	gnew = ((int) (g2*k/k2)) & 0xff;
					int	bnew = ((int) (b2*k/k2)) & 0xff;
					//System.out.println("(" + rnew + "," + gnew + "," + bnew + ")" + "k=" + k + "k2=" + k2);
					int newrgb = (0xff000000 | (rnew << 16) | (gnew << 8) | bnew);
					processedpixels[r*width+c] = newrgb;			
				}
			}
		} else if(intensity == 5){
			for(int r = 2; r < height - 2; r++){
				for(int c = 2; c < width - 2; c++){
					double dividingconst = 1.0/6.1;
					finalmatrix[r][c] = (int)
						(.02*colormatrix[r-2][c-2]*dividingconst +
						.08*colormatrix[r-2][c-1]*dividingconst +
						.14*colormatrix[r-2][c]*dividingconst +
						.08*colormatrix[r-2][c+1]*dividingconst +
						.02*colormatrix[r-2][c+2]*dividingconst +
						
						.08*colormatrix[r-1][c-2]*dividingconst +
						.37*colormatrix[r-1][c-1]*dividingconst +
						.61*colormatrix[r-1][c]*dividingconst +	
						.37*colormatrix[r-1][c+1]*dividingconst +
						.08*colormatrix[r-1][c+2]*dividingconst +
						
						.14*colormatrix[r][c-2]*dividingconst + 
						.61*colormatrix[r][c-1]*dividingconst + 
						1.0*colormatrix[r][c]*dividingconst + 
						.61*colormatrix[r][c+1]*dividingconst + 
						.14*colormatrix[r][c+2]*dividingconst + 

						.08*colormatrix[r+1][c-2]*dividingconst +
						.37*colormatrix[r+1][c-1]*dividingconst +
						.61*colormatrix[r+1][c]*dividingconst +	
						.37*colormatrix[r+1][c+1]*dividingconst +
						.08*colormatrix[r+1][c+2]*dividingconst +

						.02*colormatrix[r+2][c-2]*dividingconst +
						.08*colormatrix[r+2][c-1]*dividingconst +
						.14*colormatrix[r+2][c]*dividingconst +
						.08*colormatrix[r+2][c+1]*dividingconst +
						.02*colormatrix[r+2][c+2]*dividingconst);						
					int k = Math.abs(finalmatrix[r][c]);
					//convert back to array (making sure its color)
					int p2 = pixels[r*width+c];
					int r2 = 0xff & (p2 >> 16);
					int g2 = 0xff & (p2 >> 8);
					int b2 = 0xff & (p2);
					int k2 = (int) (.56*g2 + .33*r2 + .11*b2);
					if(r2==0) r2 = 1;
					if(g2==0) g2 = 1;
					if(b2==0) b2 = 1;
					if(k2==0) k2 = 1;
					int	rnew = ((int) (r2*k/k2)) & 0xff;
					int	gnew = ((int) (g2*k/k2)) & 0xff;
					int	bnew = ((int) (b2*k/k2)) & 0xff;
					int newrgb = (0xff000000 | (rnew << 16) | (gnew << 8) | bnew);
					processedpixels[r*width+c] = newrgb;
				}
			}		
		}
	}	

	/* changes the array back into an image, using MemoryImageSource 
	 * class
	 */
	private void convertToImage(int thepixels[]){
		MemoryImageSource newImage = 
		new MemoryImageSource(width, height, thepixels, 0, width);
		Canvas c = new Canvas();
		finalImage = c.createImage(newImage);	
	}	
}