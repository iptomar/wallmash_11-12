
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * index.java
 *
 * Created on 17/Abr/2011, 15:03:17
 */
/**
 *
 * @author Goncalo
 */
public class index extends javax.swing.JFrame {

    private File Fileimg;
    private double[] array_3x3;
    private BufferedImage imagemOriginal;
    private BufferedImage imagemEdge;
    private double[][] mask;
    private float[] k_mask;

    /** Creates new form index */
    public index() {
        initComponents();
    }

    public BufferedImage cloneImage(BufferedImage image) {
        return new BufferedImage(image.getColorModel(), image.copyData(null), image.isAlphaPremultiplied(), null);
    }
    
    private BufferedImage callCanny(BufferedImage img) {
        BufferedImage edges = null;
        try {
            //create the detector
            CannyEdgeDetector detector = new CannyEdgeDetector();
            //adjust its parameters as desired
            detector.setLowThreshold(0.5f);
            detector.setHighThreshold(1f);
            //apply it to an image
            detector.setSourceImage(img);
            detector.process();
            edges = detector.getEdgesImage();
            imagemEdge = edges;
            ImageIO.write(edges, "PNG", new File("CannyEdge.png"));
        } catch (Exception ex) {
            Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
        }
        return edges;
    }

    private void insertImage(BufferedImage img, JPanel jpanel) {
        try {
            Graphics g = jpanel.getGraphics();
            g.setColor(jpanel.getBackground());
            g.fillRect(0, 0, jpanel.getWidth(), jpanel.getWidth());
            if ((img.getWidth() > jpanel.getWidth()) || (img.getHeight() > jpanel.getHeight())) {
                g.drawImage(img, 0, 0, jpanel.getWidth(), jpanel.getHeight(), jpanel);
            } else {
                g.drawImage(img, 0, 0, jpanel);
            }
        } catch (Exception ex) {
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pImagem = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btCanny = new javax.swing.JButton();
        btLoadImg = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btSaveImg = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        cbGrey = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        tresholdSld = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMask = new javax.swing.JTextArea();
        cbOptions = new javax.swing.JComboBox();
        treshTxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pImagem.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pImagem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pImagemMouseClicked(evt);
            }
        });
        pImagem.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu"));

        btCanny.setText("Canny");
        btCanny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCannyActionPerformed(evt);
            }
        });

        btLoadImg.setText("Open Image");
        btLoadImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadImgActionPerformed(evt);
            }
        });

        btSaveImg.setText("Save Image");
        btSaveImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveImgActionPerformed(evt);
            }
        });

        cbGrey.setText("Colored?");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbGrey)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(btLoadImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(btSaveImg, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(btCanny, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(btLoadImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSaveImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btCanny)
                .addGap(93, 93, 93)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbGrey)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        jButton1.setText("apply mask");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tresholdSld.setMaximum(255);
        tresholdSld.setMinorTickSpacing(1);
        tresholdSld.setOrientation(javax.swing.JSlider.VERTICAL);
        tresholdSld.setPaintTicks(true);
        tresholdSld.setToolTipText("Treshold");
        tresholdSld.setValue(75);
        tresholdSld.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tresholdSldStateChanged(evt);
            }
        });

        txtMask.setColumns(12);
        txtMask.setFont(new java.awt.Font("Courier New", 0, 14));
        txtMask.setLineWrap(true);
        txtMask.setRows(1);
        txtMask.setText("-1 -1 -1\n0 0 0\n1 1 1\n");
        jScrollPane1.setViewportView(txtMask);

        cbOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "Smoothing", "Sharpening", "Raised", "Motion-blur", "Edge Detection" }));
        cbOptions.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbOptionsItemStateChanged(evt);
            }
        });

        treshTxt.setText("75");
        treshTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treshTxtActionPerformed(evt);
            }
        });

        jButton2.setText("re-apply mask");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tresholdSld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(treshTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(cbOptions, 0, 99, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pImagem, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(treshTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(cbOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tresholdSld, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        treshTxt.getAccessibleContext().setAccessibleName("treshTxt");

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void btCannyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCannyActionPerformed
        readMask();
        insertImage(callCanny(deepCopy(imagemOriginal)), pImagem);
    }//GEN-LAST:event_btCannyActionPerformed

    private void btLoadImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadImgActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "gif", "png");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                Fileimg = chooser.getSelectedFile();
                imagemOriginal = ImageIO.read(chooser.getSelectedFile());
            } catch (Exception ex) {
            }
            insertImage(imagemOriginal, pImagem);
        }
    }//GEN-LAST:event_btLoadImgActionPerformed

    public BufferedImage deepCopy(BufferedImage bi) {
        ColorModel cm = bi.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = bi.copyData(null);
        return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
    }
    private void btSaveImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveImgActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Images", "jpg", "gif", "png");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                ImageIO.write(imagemEdge, "PNG", chooser.getSelectedFile());
            } catch (Exception ex) {
            }
        }
    }//GEN-LAST:event_btSaveImgActionPerformed

    
    private void readMask() {
        String str = "";
        txtMask.setText(txtMask.getText().trim());
        mask = new double[txtMask.getLineCount()][];
        try {
            BufferedReader in = new BufferedReader(new StringReader(txtMask.getText()));
            int y = 0;
            while ((str = in.readLine()) != null) {
                String[] elem = str.split(" ");
                mask[y] = new double[elem.length];
                for (int x = 0; x < elem.length; x++) {
                    mask[y][x] = Double.parseDouble(elem[x]);
                }
                y++;
            }
            k_mask = new float[mask.length * mask[0].length];
            for (int yy = 0; yy < mask.length; yy++) {
                for (int xx = 0; xx < mask[yy].length; xx++) {
                    k_mask[yy * mask[yy].length + xx] = (int) mask[yy][xx];
                }
            }
        } catch (Exception e) {
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            readMask();
            BufferedImage imagemDestino;
            FilterEdge detector = new FilterEdge(cloneImage(imagemOriginal), mask, tresholdSld.getValue());
            detector.start();
            imagemDestino = detector.getEdgeImg();
            insertImage(cloneImage(imagemEdge), pImagem);
            ImageIO.write(imagemDestino, "JPG", new File("egde1111111111111111111111111111.jpg"));
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbOptionsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbOptionsItemStateChanged
        int Selection;
        Selection = cbOptions.getSelectedIndex();
        if (Selection == 0) {
            txtMask.setText("1 0 -1\n" + "2 0 -2\n" + "1 0 -1");
        } else if (Selection == 1) {
            txtMask.setText("1 1 1\n" + "1 2 1\n" + "1 1 1");
        } else if (Selection == 2) {
            txtMask.setText("-1 -1 -1\n" + "-1 9 -1\n" + "-1 -1 -1");
        } else if (Selection == 3) {
            txtMask.setText("0 0 -2\n" + "0 2 0\n" + "1 0 0");
        } else if (Selection == 4) {
            txtMask.setText("0 0 1\n" + "0 0 0\n" + "1 0 0");
        } else if (Selection == 5) {
            txtMask.setText("-1 -1 -1\n" + "-1 8 -1\n" + "-1 -1 -1");
        }
    }//GEN-LAST:event_cbOptionsItemStateChanged

    private void pImagemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pImagemMouseClicked
        btLoadImg.doClick();
    }//GEN-LAST:event_pImagemMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            readMask();
            FilterEdge detector = new FilterEdge(cloneImage(imagemEdge), mask,tresholdSld.getValue());
            detector.start();
            imagemEdge = detector.getEdgeImg();
            insertImage(cloneImage(imagemEdge), pImagem);
            ImageIO.write(imagemEdge, "JPG", new File("egde1111111111111111111111111111.jpg"));
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void treshTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treshTxtActionPerformed
        if (Integer.parseInt(treshTxt.getText()) > 255) {
            tresholdSld.setValue(255);
        } else if (Integer.parseInt(treshTxt.getText()) < 0) {
            tresholdSld.setValue(0);
        } else {
            tresholdSld.setValue(Integer.parseInt(treshTxt.getText()));
        }
        


    }//GEN-LAST:event_treshTxtActionPerformed

    private void tresholdSldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tresholdSldStateChanged
        treshTxt.setText(Integer.toString(tresholdSld.getValue()));
    }//GEN-LAST:event_tresholdSldStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new index().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCanny;
    private javax.swing.JButton btLoadImg;
    private javax.swing.JButton btSaveImg;
    private javax.swing.JCheckBox cbGrey;
    private javax.swing.JComboBox cbOptions;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel pImagem;
    private javax.swing.JTextField treshTxt;
    private javax.swing.JSlider tresholdSld;
    private javax.swing.JTextArea txtMask;
    // End of variables declaration//GEN-END:variables
}
